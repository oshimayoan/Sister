/*
 * Copyright (C) 2014 Yoan Pratama Putra
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package fridge;

import java.awt.event.InputEvent;
import java.rmi.RemoteException;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Yoan Pratama Putra
 */
public class Main extends javax.swing.JFrame{

    /**
     * Creates new form Main
     */
    private Fridge server;
    public static int temperature;
    public static int freezerTemp;
    public static Thread tempThread;
    private Temperature tempClass;
    private Item itemClass;
    private DefaultTableModel tbl;
    
    // ubah suhu
    public static void changeTemperature() {
        Temperature t = new Temperature();
        temperature = t.getTemp();
        freezerTemp = t.getFreezer();
        lblTemperature.setText(Integer.toString(temperature));
        lblFreezer.setText(Integer.toString(freezerTemp));
    }
    
    // refresh list isi kulkas
    private void refreshList() {
        itemClass = new Item();
        int numItem = itemClass.getNumItem();
        Object[][] o = new Object[numItem][2];
                
        // bersihkan row
        int row = tbl.getRowCount();
        for(int i = row - 1; i >= 0; i--)
            tbl.removeRow(i);
                
        // tampilkan list isi kulkas
        o = itemClass.getItems();
        for(int i = 0; i < numItem; i++)
            tbl.addRow(o[i]);
    }
    
    public Main() {
        initComponents();
        this.setTitle("Fridge");
        try {
            server = new Fridge();
            tbl = (DefaultTableModel)tblItem.getModel();
        } catch(RemoteException ex) {
            System.out.println("Server: " + ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCelcius = new javax.swing.JLabel();
        btnSwitch = new javax.swing.JToggleButton();
        btnTempMin = new javax.swing.JButton();
        lblTemperature = new javax.swing.JLabel();
        btnTempMax = new javax.swing.JButton();
        lblFridgeTemperature = new javax.swing.JLabel();
        btnFreezerMax = new javax.swing.JButton();
        btnFreezerMin = new javax.swing.JButton();
        lblCelcius2 = new javax.swing.JLabel();
        lblFreezer = new javax.swing.JLabel();
        lblFreezerTemperature = new javax.swing.JLabel();
        itmTelur = new javax.swing.JLabel();
        itmApel = new javax.swing.JLabel();
        itmJeruk = new javax.swing.JLabel();
        itmSusu = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblItem = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(600, 400));
        setMinimumSize(new java.awt.Dimension(600, 400));
        setPreferredSize(new java.awt.Dimension(600, 400));
        setResizable(false);

        lblCelcius.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblCelcius.setLabelFor(lblTemperature);
        lblCelcius.setText("°C");

        btnSwitch.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnSwitch.setText("Turn on");
        btnSwitch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSwitchActionPerformed(evt);
            }
        });

        btnTempMin.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnTempMin.setText("-");
        btnTempMin.setEnabled(false);
        btnTempMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTempMinActionPerformed(evt);
            }
        });

        lblTemperature.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lblTemperature.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTemperature.setText("0");

        btnTempMax.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnTempMax.setText("+");
        btnTempMax.setEnabled(false);
        btnTempMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTempMaxActionPerformed(evt);
            }
        });

        lblFridgeTemperature.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblFridgeTemperature.setLabelFor(lblTemperature);
        lblFridgeTemperature.setText("Fridge :");

        btnFreezerMax.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnFreezerMax.setText("+");
        btnFreezerMax.setEnabled(false);
        btnFreezerMax.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFreezerMaxActionPerformed(evt);
            }
        });

        btnFreezerMin.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnFreezerMin.setText("-");
        btnFreezerMin.setEnabled(false);
        btnFreezerMin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFreezerMinActionPerformed(evt);
            }
        });

        lblCelcius2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblCelcius2.setLabelFor(lblFreezer);
        lblCelcius2.setText("°C");

        lblFreezer.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lblFreezer.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFreezer.setText("0");

        lblFreezerTemperature.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblFreezerTemperature.setLabelFor(lblFreezer);
        lblFreezerTemperature.setText("Freezer :");

        itmTelur.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        itmTelur.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        itmTelur.setText("Telur");
        itmTelur.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        itmTelur.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        itmTelur.setEnabled(false);
        itmTelur.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itmTelurMouseClicked(evt);
            }
        });

        itmApel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        itmApel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        itmApel.setText("Apel");
        itmApel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        itmApel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        itmApel.setEnabled(false);
        itmApel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itmApelMouseClicked(evt);
            }
        });

        itmJeruk.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        itmJeruk.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        itmJeruk.setText("Jeruk");
        itmJeruk.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        itmJeruk.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        itmJeruk.setEnabled(false);
        itmJeruk.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itmJerukMouseClicked(evt);
            }
        });

        itmSusu.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        itmSusu.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        itmSusu.setText("Susu");
        itmSusu.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        itmSusu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        itmSusu.setEnabled(false);
        itmSusu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itmSusuMouseClicked(evt);
            }
        });

        tblItem.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        tblItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblItem.setEnabled(false);
        tblItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblItemMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblItem);
        if (tblItem.getColumnModel().getColumnCount() > 0) {
            tblItem.getColumnModel().getColumn(0).setMinWidth(250);
            tblItem.getColumnModel().getColumn(0).setPreferredWidth(300);
            tblItem.getColumnModel().getColumn(0).setMaxWidth(300);
            tblItem.getColumnModel().getColumn(1).setMinWidth(100);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSwitch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 326, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblFridgeTemperature)
                            .addComponent(lblFreezerTemperature))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblCelcius))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblFreezer, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblCelcius2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnTempMin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnFreezerMin))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnFreezerMax, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnTempMax)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(itmSusu, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(itmTelur, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(itmApel, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(itmJeruk, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCelcius)
                    .addComponent(btnTempMin)
                    .addComponent(lblTemperature)
                    .addComponent(btnTempMax)
                    .addComponent(btnSwitch)
                    .addComponent(lblFridgeTemperature))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFreezerMax)
                    .addComponent(btnFreezerMin)
                    .addComponent(lblCelcius2)
                    .addComponent(lblFreezer)
                    .addComponent(lblFreezerTemperature))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(itmTelur, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(itmApel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(itmJeruk, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(itmSusu, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 22, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void btnSwitchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSwitchActionPerformed
        try {
            if(this.btnSwitch.getText().equals("Turn on")) {
                // menghidupkan kulkas dan menjalankan RMI
                server.start();
                
                // ambil nilai suhu dari database
                tempClass = new Temperature();
                temperature = tempClass.getTemp();
                freezerTemp = tempClass.getFreezer();
                
                // ambil list isi kulkas dari database
                refreshList();
                
                this.setTitle("Fridge [" + server.getStatus() + "]");
                this.btnSwitch.setText("Turn off");
                this.btnTempMin.setEnabled(true);
                this.btnTempMax.setEnabled(true);
                this.btnFreezerMin.setEnabled(true);
                this.btnFreezerMax.setEnabled(true);
                this.tblItem.setEnabled(true);
                this.itmTelur.setEnabled(true);
                this.itmApel.setEnabled(true);
                this.itmJeruk.setEnabled(true);
                this.itmSusu.setEnabled(true);
            } else {
                // mematikan kulkas dan menghentikan RMI
                server.stop();
                this.setTitle("Fridge");
                this.btnSwitch.setText("Turn on");
                this.btnTempMin.setEnabled(false);
                this.btnTempMax.setEnabled(false);
                this.btnFreezerMin.setEnabled(false);
                this.btnFreezerMax.setEnabled(false);
                this.tblItem.setEnabled(false);
                this.itmTelur.setEnabled(false);
                this.itmApel.setEnabled(false);
                this.itmJeruk.setEnabled(false);
                this.itmSusu.setEnabled(false);
            }
        } catch(Exception ex) {
            System.out.println("Failed: " + ex);
            this.btnSwitch.setSelected(false);
        }
    }//GEN-LAST:event_btnSwitchActionPerformed

    private void btnTempMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTempMinActionPerformed
        // cek apakah suhu > -20
        if(temperature > 1) {
            // kurangi suhu
            temperature--;
            lblTemperature.setText(Integer.toString(temperature));
            
            // update suhu baru ke database
            tempClass.setTemp(temperature, freezerTemp);
        }
    }//GEN-LAST:event_btnTempMinActionPerformed

    private void btnTempMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTempMaxActionPerformed
        // cek apakah suhu < 4
        if(temperature < 6) {
            // tambah suhu
            temperature++;
            lblTemperature.setText(Integer.toString(temperature));
            
            // update suhu baru ke database
            tempClass.setTemp(temperature, freezerTemp);
        }
    }//GEN-LAST:event_btnTempMaxActionPerformed

    private void btnFreezerMaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFreezerMaxActionPerformed
        // cek apakah suhu freezer < -13
        if(freezerTemp < -13) {
            // tambah suhu
            freezerTemp++;
            lblFreezer.setText(Integer.toString(freezerTemp));
            
            // update suhu baru ke database
            tempClass.setTemp(temperature, freezerTemp);
        }
    }//GEN-LAST:event_btnFreezerMaxActionPerformed

    private void btnFreezerMinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFreezerMinActionPerformed
        // cek apakah suhu > -21
        if(freezerTemp > -21) {
            // kurangi suhu
            freezerTemp--;
            lblFreezer.setText(Integer.toString(freezerTemp));
            
            // update suhu baru ke database
            tempClass.setTemp(temperature, freezerTemp);
        }
    }//GEN-LAST:event_btnFreezerMinActionPerformed

    private void itmTelurMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itmTelurMouseClicked
        // tambahkan telur ke dalam list isi kulkas
        String itemName = itmTelur.getText();
        itemClass.addItem(itemName);
        
        // refresh list isi kulkas
        refreshList();
    }//GEN-LAST:event_itmTelurMouseClicked

    private void itmApelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itmApelMouseClicked
         // tambahkan apel ke dalam list isi kulkas
        String itemName = itmApel.getText();
        itemClass.addItem(itemName);
        
        // refresh list isi kulkas
        refreshList();
    }//GEN-LAST:event_itmApelMouseClicked

    private void itmJerukMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itmJerukMouseClicked
        // tambahkan jeruk ke dalam list isi kulkas
        String itemName = itmJeruk.getText();
        itemClass.addItem(itemName);
        
        // refresh list isi kulkas
        refreshList();
    }//GEN-LAST:event_itmJerukMouseClicked

    private void itmSusuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itmSusuMouseClicked
         // tambahkan susu ke dalam list isi kulkas
        String itemName = itmSusu.getText();
        itemClass.addItem(itemName);
        
        // refresh list isi kulkas
        refreshList();
    }//GEN-LAST:event_itmSusuMouseClicked

    private void tblItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblItemMouseClicked
        // kurangi atau hapus barang yang diambil
        if(evt.getClickCount() > 1 & evt.getModifiers() == InputEvent.BUTTON1_MASK) {
            String itemName = tblItem.getValueAt(tblItem.getSelectedRow(), 0).toString();
            itemClass.removeItem(itemName);
            
            // refresh list isi kulkas
            refreshList();
        }
    }//GEN-LAST:event_tblItemMouseClicked
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
                
                // buat dan jalankan thread suhu
                temperatureThread tempThread = new temperatureThread();
                tempThread.start();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFreezerMax;
    private javax.swing.JButton btnFreezerMin;
    private javax.swing.JToggleButton btnSwitch;
    private javax.swing.JButton btnTempMax;
    private javax.swing.JButton btnTempMin;
    private javax.swing.JLabel itmApel;
    private javax.swing.JLabel itmJeruk;
    private javax.swing.JLabel itmSusu;
    private javax.swing.JLabel itmTelur;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblCelcius;
    private javax.swing.JLabel lblCelcius2;
    private static javax.swing.JLabel lblFreezer;
    private javax.swing.JLabel lblFreezerTemperature;
    private javax.swing.JLabel lblFridgeTemperature;
    private static javax.swing.JLabel lblTemperature;
    private javax.swing.JTable tblItem;
    // End of variables declaration//GEN-END:variables

}
